// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/fields.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Agrovision.Spray_Calculator.gRPC.Protos {

  /// <summary>Holder for reflection information generated from Protos/fields.proto</summary>
  public static partial class FieldsReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/fields.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FieldsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b3MvZmllbGRzLnByb3RvEgxGaWVsZHNfUHJvdG8icwoIRmllbGRE",
            "dG8SCgoCSWQYASABKAMSEAoIRmllbGRLZXkYAiABKAkSDwoHVXNlcktleRgD",
            "IAEoCRITCgtEZXNjcmlwdGlvbhgEIAEoCRIRCglGaWVsZFNpemUYBSABKAES",
            "EAoISXNBY3RpdmUYBiABKAgiOQoMTGlzdEZpZWxkRHRvEikKCUZpZWxkTGlz",
            "dBgBIAMoCzIWLkZpZWxkc19Qcm90by5GaWVsZER0byItCgtGaWVsZExvb2t1",
            "cBIMCgRwYWdlGAEgASgFEhAKCHBhZ2VTaXplGAIgASgFMpwBChFGaWVsZF9H",
            "UlBDU2VydmljZRI9CgtDcmVhdGVGaWVsZBIWLkZpZWxkc19Qcm90by5GaWVs",
            "ZER0bxoWLkZpZWxkc19Qcm90by5GaWVsZER0bxJICg9HZXRBY3RpdmVGaWVs",
            "ZHMSGS5GaWVsZHNfUHJvdG8uRmllbGRMb29rdXAaGi5GaWVsZHNfUHJvdG8u",
            "TGlzdEZpZWxkRHRvQiqqAidBZ3JvdmlzaW9uLlNwcmF5X0NhbGN1bGF0b3Iu",
            "Z1JQQy5Qcm90b3NiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto), global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto.Parser, new[]{ "Id", "FieldKey", "UserKey", "Description", "FieldSize", "IsActive" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrovision.Spray_Calculator.gRPC.Protos.ListFieldDto), global::Agrovision.Spray_Calculator.gRPC.Protos.ListFieldDto.Parser, new[]{ "FieldList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Agrovision.Spray_Calculator.gRPC.Protos.FieldLookup), global::Agrovision.Spray_Calculator.gRPC.Protos.FieldLookup.Parser, new[]{ "Page", "PageSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FieldDto : pb::IMessage<FieldDto> {
    private static readonly pb::MessageParser<FieldDto> _parser = new pb::MessageParser<FieldDto>(() => new FieldDto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agrovision.Spray_Calculator.gRPC.Protos.FieldsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDto(FieldDto other) : this() {
      id_ = other.id_;
      fieldKey_ = other.fieldKey_;
      userKey_ = other.userKey_;
      description_ = other.description_;
      fieldSize_ = other.fieldSize_;
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldDto Clone() {
      return new FieldDto(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "FieldKey" field.</summary>
    public const int FieldKeyFieldNumber = 2;
    private string fieldKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldKey {
      get { return fieldKey_; }
      set {
        fieldKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserKey" field.</summary>
    public const int UserKeyFieldNumber = 3;
    private string userKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserKey {
      get { return userKey_; }
      set {
        userKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Description" field.</summary>
    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FieldSize" field.</summary>
    public const int FieldSizeFieldNumber = 5;
    private double fieldSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FieldSize {
      get { return fieldSize_; }
      set {
        fieldSize_ = value;
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 6;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FieldKey != other.FieldKey) return false;
      if (UserKey != other.UserKey) return false;
      if (Description != other.Description) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FieldSize, other.FieldSize)) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (FieldKey.Length != 0) hash ^= FieldKey.GetHashCode();
      if (UserKey.Length != 0) hash ^= UserKey.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (FieldSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FieldSize);
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (FieldKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldKey);
      }
      if (UserKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserKey);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
      if (FieldSize != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(FieldSize);
      }
      if (IsActive != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (FieldKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldKey);
      }
      if (UserKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserKey);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (FieldSize != 0D) {
        size += 1 + 8;
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldDto other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.FieldKey.Length != 0) {
        FieldKey = other.FieldKey;
      }
      if (other.UserKey.Length != 0) {
        UserKey = other.UserKey;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.FieldSize != 0D) {
        FieldSize = other.FieldSize;
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            FieldKey = input.ReadString();
            break;
          }
          case 26: {
            UserKey = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
          case 41: {
            FieldSize = input.ReadDouble();
            break;
          }
          case 48: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListFieldDto : pb::IMessage<ListFieldDto> {
    private static readonly pb::MessageParser<ListFieldDto> _parser = new pb::MessageParser<ListFieldDto>(() => new ListFieldDto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListFieldDto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agrovision.Spray_Calculator.gRPC.Protos.FieldsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFieldDto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFieldDto(ListFieldDto other) : this() {
      fieldList_ = other.fieldList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListFieldDto Clone() {
      return new ListFieldDto(this);
    }

    /// <summary>Field number for the "FieldList" field.</summary>
    public const int FieldListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto> _repeated_fieldList_codec
        = pb::FieldCodec.ForMessage(10, global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto.Parser);
    private readonly pbc::RepeatedField<global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto> fieldList_ = new pbc::RepeatedField<global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Agrovision.Spray_Calculator.gRPC.Protos.FieldDto> FieldList {
      get { return fieldList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListFieldDto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListFieldDto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fieldList_.Equals(other.fieldList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= fieldList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      fieldList_.WriteTo(output, _repeated_fieldList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += fieldList_.CalculateSize(_repeated_fieldList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListFieldDto other) {
      if (other == null) {
        return;
      }
      fieldList_.Add(other.fieldList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            fieldList_.AddEntriesFrom(input, _repeated_fieldList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FieldLookup : pb::IMessage<FieldLookup> {
    private static readonly pb::MessageParser<FieldLookup> _parser = new pb::MessageParser<FieldLookup>(() => new FieldLookup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldLookup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Agrovision.Spray_Calculator.gRPC.Protos.FieldsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldLookup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldLookup(FieldLookup other) : this() {
      page_ = other.page_;
      pageSize_ = other.pageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldLookup Clone() {
      return new FieldLookup(this);
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 1;
    private int page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "pageSize" field.</summary>
    public const int PageSizeFieldNumber = 2;
    private int pageSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageSize {
      get { return pageSize_; }
      set {
        pageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldLookup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldLookup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Page != other.Page) return false;
      if (PageSize != other.PageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Page != 0) hash ^= Page.GetHashCode();
      if (PageSize != 0) hash ^= PageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Page != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Page);
      }
      if (PageSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Page != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Page);
      }
      if (PageSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldLookup other) {
      if (other == null) {
        return;
      }
      if (other.Page != 0) {
        Page = other.Page;
      }
      if (other.PageSize != 0) {
        PageSize = other.PageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Page = input.ReadInt32();
            break;
          }
          case 16: {
            PageSize = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
